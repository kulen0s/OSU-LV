import pandas as pd
import matplotlib.pyplot as plt
import sklearn.linear_model as lm
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

# Učitavanje podataka
df = pd.read_csv("data_C02_emission.csv")

# a) Odabir željenih numeričkih veličina i podjela podataka na skup za učenje i testiranje
numericki_stupci = ['Engine Size (L)', 'Cylinders', 'Fuel Consumption City (L/100km)', 'Fuel Consumption Hwy (L/100km)']
X = df[numericki_stupci]  # Odabir značajki
y = df['CO2 Emissions (g/km)']  # Odabir ciljne varijable
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)  # Podjela podataka

# b) Prikaži ovisnost emisije CO2 o jednoj numeričkoj značajki
plt.figure(figsize=(8, 6))
plt.scatter(X_train['Engine Size (L)'], y_train, color='blue', label='Train')  # Podaci za učenje
plt.scatter(X_test['Engine Size (L)'], y_test, color='red', label='Test')  # Podaci za testiranje
plt.xlabel('Engine Size (L)')
plt.ylabel('CO2 Emissions (g/km)')
plt.title('Ovisnost emisije CO2 o veličini motora')
plt.legend()
plt.show()

# c) Standardizacija ulaznih veličina
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)  # Skaliranje podataka za učenje
X_test_scaled = scaler.transform(X_test)  # Skaliranje podataka za testiranje

# Prikaži histogram vrijednosti jedne ulazne značajke prije i nakon skaliranja
plt.figure(figsize=(10, 6))
plt.hist(X_train['Engine Size (L)'], bins=20, color='skyblue', alpha=0.5, label='Before Scaling')  # Prije skaliranja
plt.hist(X_train_scaled[:, 0], bins=20, color='red', alpha=0.5, label='After Scaling')  # Nakon skaliranja
plt.xlabel('Engine Size (L)')
plt.ylabel('Frequency')
plt.title('Histogram vrijednosti veličine motora prije i nakon skaliranja')
plt.legend()
plt.grid(True)
plt.show()

# d) Izgradnja linearnog regresijskog modela
linearModel = lm.LinearRegression()  # Inicijalizacija linearnog regresijskog modela
linearModel.fit(X_train_scaled, y_train)  # Prijenos podataka za učenje i izgradnja modela
print("Koeficijenti modela:")  # Ispis koeficijenata modela
print(linearModel.coef_)  # Ispis koeficijenata modela


# e) Procjena izlazne značajke na temelju ulaznih značajki skupa za testiranje
y_pred = linearModel.predict(X_test_scaled)  # Predikcija izlazne značajke za testni skup

# Prikaži dijagram raspršenja stvarnih i predviđenih vrijednosti izlazne značajke
plt.figure(figsize=(8, 6))
plt.scatter(y_test, y_pred, color='blue')  # Dijagram raspršenja
plt.xlabel('Stvarne vrijednosti')
plt.ylabel('Predviđene vrijednosti')
plt.title('Dijagram raspršenja stvarnih i predviđenih vrijednosti CO2 emisije')
plt.grid(True)
plt.show()


# f) Vrednovanje modela
mse = mean_squared_error(y_test, y_pred)  # Izračun srednjekvadratne pogreške
r2 = r2_score(y_test, y_pred)  # Izračun R-kvadratne vrijednosti
print("Mean Squared Error:", mse)  # Ispis srednjekvadratne pogreške
print("R-squared:", r2)  # Ispis R-kvadratne vrijednosti

# g) Promjena evaluacijskih metrika na testnom skupu kada mijenjamo broj ulaznih značajki
# Vrijednosti evaluacijskih metrika ovise o tome koliko dobro model opisuje podatke i koliko su značajke relevantne.
# Dodavanjem više relevantnih značajki može poboljšati rezultate modela
# , dok dodavanje manje relevantnih značajki može pogoršati performanse.







from sklearn.model_selection import train_test_split
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
import sklearn.linear_model as lm
from sklearn.metrics import mean_absolute_error, mean_squared_error, mean_absolute_percentage_error
from sklearn.preprocessing import OneHotEncoder

# Učitavanje podataka
data = pd.read_csv("data_C02_emission.csv")

# Kodiranje kategoričke varijable 'Fuel Type' koristeći 1-of-K kodiranje
ohe = OneHotEncoder()
X_encoded = pd.DataFrame(ohe.fit_transform(data[['Fuel Type']]).toarray())
data = data.join(X_encoded)
data.columns = ['Make', 'Model', 'Vehicle Class', 'Engine Size (L)', 'Cylinders', 'Transmission','Fuel Type',
                'Fuel Consumption City (L/100km)','Fuel Consumption Hwy (L/100km)', 
                'Fuel Consumption Comb (L/100km)', 'Fuel Consumption Comb (mpg)', 
                'CO2 Emissions (g/km)', 'Fuel Type 0', 'Fuel Type 1', 'Fuel Type 2', 'Fuel Type 3']

# Odvojiti značajke od ciljne varijable
X = data.drop(['Make', 'Model', 'Vehicle Class', 'Transmission', 'Fuel Type', 'CO2 Emissions (g/km)'], axis=1)
y = data['CO2 Emissions (g/km)'].copy()

# Podijeliti podatke na skup za treniranje i skup za testiranje
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=5)

# Skaliranje podataka
scaler = MinMaxScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Inicijalizacija i treniranje modela
linearModel = lm.LinearRegression()
linearModel.fit(X_train_scaled, y_train)

# Predviđanje na testnom skupu
y_test_prediction = linearModel.predict(X_test_scaled)

# Evaluacija performansi modela
MSE = mean_squared_error(y_test, y_test_prediction)
MAE = mean_absolute_error(y_test, y_test_prediction)
MAPE = mean_absolute_percentage_error(y_test, y_test_prediction)

# Vizualizacija rezidualnih vrijednosti
residuals = y_test - y_test_prediction
plt.scatter(y_test_prediction, residuals)
plt.xlabel("Predicted CO2 Emissions (g/km)")
plt.ylabel("Residuals")
plt.title("Residual Plot")
plt.axhline(y=0, color='r', linestyle='-')
plt.show()

print(f"Mean squared error(MSE): {MSE}")
print(f"Mean absolute error(MAE): {MAE}")
print(f"Mean absolute percentage error(MAPE): {MAPE}")

